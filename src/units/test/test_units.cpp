#include "NCPAUnits.h"
#include <gtest/gtest.h>
#include <gmock/gmock.h>
#include <cmath>
#include <stdexcept>

using namespace std;
using namespace NCPA;
using namespace testing;


TEST(unitsTest, ConvertDistanceUnits) {
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_DISTANCE_METERS,UNITS_DISTANCE_METERS), 1.0);
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_DISTANCE_KILOMETERS,UNITS_DISTANCE_KILOMETERS), 1.0);
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_DISTANCE_METERS,UNITS_DISTANCE_KILOMETERS), 0.001);
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_DISTANCE_KILOMETERS,UNITS_DISTANCE_METERS), 1000.0);
}

TEST(unitsTest, ConvertTemperatureUnits) {
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_TEMPERATURE_KELVIN,UNITS_TEMPERATURE_KELVIN), 1.0);
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_TEMPERATURE_CELSIUS,UNITS_TEMPERATURE_CELSIUS), 1.0);
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_TEMPERATURE_FAHRENHEIT,UNITS_TEMPERATURE_FAHRENHEIT), 1.0);
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_TEMPERATURE_KELVIN,UNITS_TEMPERATURE_CELSIUS), -272.15);
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_TEMPERATURE_CELSIUS,UNITS_TEMPERATURE_KELVIN), 274.15);
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_TEMPERATURE_KELVIN,UNITS_TEMPERATURE_FAHRENHEIT), -457.87);
	ASSERT_DOUBLE_EQ( Units::convert(41.0,UNITS_TEMPERATURE_FAHRENHEIT,UNITS_TEMPERATURE_KELVIN), 278.15);
	ASSERT_DOUBLE_EQ( Units::convert(100.0,UNITS_TEMPERATURE_CELSIUS,UNITS_TEMPERATURE_FAHRENHEIT), 212.0);
	ASSERT_DOUBLE_EQ( Units::convert(41.0,UNITS_TEMPERATURE_FAHRENHEIT,UNITS_TEMPERATURE_CELSIUS), 5.0);
}

TEST(unitsTest, ConvertSpeedUnits) {
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_SPEED_METERS_PER_SECOND,UNITS_SPEED_METERS_PER_SECOND), 1.0);
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_SPEED_KILOMETERS_PER_SECOND,UNITS_SPEED_KILOMETERS_PER_SECOND), 1.0);
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_SPEED_METERS_PER_SECOND,UNITS_SPEED_KILOMETERS_PER_SECOND), 0.001);
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_SPEED_KILOMETERS_PER_SECOND,UNITS_SPEED_METERS_PER_SECOND), 1000.0);
}

TEST(unitsTest, ConvertPressureUnits) {
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_PRESSURE_PASCALS,UNITS_PRESSURE_PASCALS), 1.0);
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_PRESSURE_HECTOPASCALS,UNITS_PRESSURE_HECTOPASCALS), 1.0);
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_PRESSURE_MILLIBARS,UNITS_PRESSURE_MILLIBARS), 1.0);
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_PRESSURE_ATMOSPHERES,UNITS_PRESSURE_ATMOSPHERES), 1.0);

	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_PRESSURE_PASCALS,UNITS_PRESSURE_HECTOPASCALS), 0.01);
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_PRESSURE_PASCALS,UNITS_PRESSURE_MILLIBARS), 0.01);
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_PRESSURE_PASCALS,UNITS_PRESSURE_ATMOSPHERES), 0.00000986923);

	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_PRESSURE_HECTOPASCALS,UNITS_PRESSURE_PASCALS), 100.0);
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_PRESSURE_HECTOPASCALS,UNITS_PRESSURE_MILLIBARS), 1.0);
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_PRESSURE_HECTOPASCALS,UNITS_PRESSURE_ATMOSPHERES), 0.000986923);

	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_PRESSURE_MILLIBARS,UNITS_PRESSURE_HECTOPASCALS), 1.0);
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_PRESSURE_MILLIBARS,UNITS_PRESSURE_PASCALS), 100.0);
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_PRESSURE_MILLIBARS,UNITS_PRESSURE_ATMOSPHERES), 0.000986923);

	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_PRESSURE_ATMOSPHERES,UNITS_PRESSURE_HECTOPASCALS), 1013.25);
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_PRESSURE_ATMOSPHERES,UNITS_PRESSURE_PASCALS), 101325.0);
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_PRESSURE_ATMOSPHERES,UNITS_PRESSURE_MILLIBARS), 1013.25);
}

TEST(unitsTest, ConvertDensityUnits) {
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_DENSITY_KILOGRAMS_PER_CUBIC_METER,UNITS_DENSITY_KILOGRAMS_PER_CUBIC_METER), 1.0);
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_DENSITY_GRAMS_PER_CUBIC_CENTIMETER,UNITS_DENSITY_GRAMS_PER_CUBIC_CENTIMETER), 1.0);
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_DENSITY_KILOGRAMS_PER_CUBIC_METER,UNITS_DENSITY_GRAMS_PER_CUBIC_CENTIMETER), 0.001);
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_DENSITY_GRAMS_PER_CUBIC_CENTIMETER,UNITS_DENSITY_KILOGRAMS_PER_CUBIC_METER), 1000.0);
}

TEST(unitsTest, ConvertDirectionUnits) {
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_DIRECTION_DEGREES_CLOCKWISE_FROM_NORTH,UNITS_DIRECTION_DEGREES_CLOCKWISE_FROM_NORTH), 1.0);
	ASSERT_DOUBLE_EQ( Units::convert(1.0,UNITS_DIRECTION_DEGREES_COUNTERCLOCKWISE_FROM_EAST,UNITS_DIRECTION_DEGREES_COUNTERCLOCKWISE_FROM_EAST), 1.0);
	ASSERT_DOUBLE_EQ( Units::convert(0.0,UNITS_DIRECTION_DEGREES_CLOCKWISE_FROM_NORTH,UNITS_DIRECTION_DEGREES_COUNTERCLOCKWISE_FROM_EAST), 90.0);
	ASSERT_DOUBLE_EQ( Units::convert(180.0,UNITS_DIRECTION_DEGREES_COUNTERCLOCKWISE_FROM_EAST,UNITS_DIRECTION_DEGREES_CLOCKWISE_FROM_NORTH), 270.0);
}

TEST(unitsTest, ConvertAngleUnits) {
	ASSERT_DOUBLE_EQ( Units::convert(180.0,UNITS_ANGLE_DEGREES,UNITS_ANGLE_DEGREES), 180.0);
	ASSERT_DOUBLE_EQ( Units::convert(2.0,UNITS_ANGLE_RADIANS,UNITS_ANGLE_RADIANS), 2.0);
	ASSERT_DOUBLE_EQ( Units::convert(180.0,UNITS_ANGLE_DEGREES,UNITS_ANGLE_RADIANS), M_PI);
	ASSERT_DOUBLE_EQ( Units::convert(3.0*M_PI/2.0,UNITS_ANGLE_RADIANS,UNITS_ANGLE_DEGREES), 270.0);
}

TEST(unitsTest, ConvertArrayTest) {
	double in[5] = { 1.0, 2.0, 4.0, -2.0, -5.0 };
	double out[5];
	Units::convert( in, 5, UNITS_DISTANCE_KILOMETERS, UNITS_DISTANCE_METERS, out );
	ASSERT_DOUBLE_EQ( out[0], 1000.0 );
	ASSERT_DOUBLE_EQ( out[1], 2000.0 );
	ASSERT_DOUBLE_EQ( out[2], 4000.0 );
	ASSERT_DOUBLE_EQ( out[3], -2000.0 );
	ASSERT_DOUBLE_EQ( out[4], -5000.0 );
}

TEST(unitsTest, FromStringTest) {
	ASSERT_EQ( Units::fromString( "" ), UNITS_NONE );
	ASSERT_EQ( Units::fromString( "N/A" ), UNITS_NONE );
	ASSERT_EQ( Units::fromString( "K" ), UNITS_TEMPERATURE_KELVIN );
	ASSERT_EQ( Units::fromString( "DEGK" ), UNITS_TEMPERATURE_KELVIN );
	ASSERT_EQ( Units::fromString( "DEG K" ), UNITS_TEMPERATURE_KELVIN );
	ASSERT_EQ( Units::fromString( "KELVIN" ), UNITS_TEMPERATURE_KELVIN );
	ASSERT_EQ( Units::fromString( "C" ), UNITS_TEMPERATURE_CELSIUS );
	ASSERT_EQ( Units::fromString( "DEGC" ), UNITS_TEMPERATURE_CELSIUS );
	ASSERT_EQ( Units::fromString( "DEG C" ), UNITS_TEMPERATURE_CELSIUS );
	ASSERT_EQ( Units::fromString( "DEGREES C" ), UNITS_TEMPERATURE_CELSIUS );
	ASSERT_EQ( Units::fromString( "CELSIUS" ), UNITS_TEMPERATURE_CELSIUS );
	ASSERT_EQ( Units::fromString( "CENTIGRADE" ), UNITS_TEMPERATURE_CELSIUS );
	ASSERT_EQ( Units::fromString( "F" ), UNITS_TEMPERATURE_FAHRENHEIT );
	ASSERT_EQ( Units::fromString( "DEGF" ), UNITS_TEMPERATURE_FAHRENHEIT );
	ASSERT_EQ( Units::fromString( "DEG F" ), UNITS_TEMPERATURE_FAHRENHEIT );
	ASSERT_EQ( Units::fromString( "DEGREES F" ), UNITS_TEMPERATURE_FAHRENHEIT );
	ASSERT_EQ( Units::fromString( "FAHRENHEIT" ), UNITS_TEMPERATURE_FAHRENHEIT );
	ASSERT_EQ( Units::fromString( "KM" ), UNITS_DISTANCE_KILOMETERS );
	ASSERT_EQ( Units::fromString( "kilometers" ), UNITS_DISTANCE_KILOMETERS );
	ASSERT_EQ( Units::fromString( "m" ), UNITS_DISTANCE_METERS );
	ASSERT_EQ( Units::fromString( "meters" ), UNITS_DISTANCE_METERS );
	ASSERT_EQ( Units::fromString( "m/s" ), UNITS_SPEED_METERS_PER_SECOND );
	ASSERT_EQ( Units::fromString( "mps" ), UNITS_SPEED_METERS_PER_SECOND );
	ASSERT_EQ( Units::fromString( "mpers" ), UNITS_SPEED_METERS_PER_SECOND );
	ASSERT_EQ( Units::fromString( "m per s" ), UNITS_SPEED_METERS_PER_SECOND );
	ASSERT_EQ( Units::fromString( "meters per second" ), UNITS_SPEED_METERS_PER_SECOND );
	ASSERT_EQ( Units::fromString( "km/s" ), UNITS_SPEED_KILOMETERS_PER_SECOND );
	ASSERT_EQ( Units::fromString( "kmps" ), UNITS_SPEED_KILOMETERS_PER_SECOND );
	ASSERT_EQ( Units::fromString( "kmpers" ), UNITS_SPEED_KILOMETERS_PER_SECOND );
	ASSERT_EQ( Units::fromString( "km per s" ), UNITS_SPEED_KILOMETERS_PER_SECOND );
	ASSERT_EQ( Units::fromString( "kilometers per second" ), UNITS_SPEED_KILOMETERS_PER_SECOND );
	ASSERT_EQ( Units::fromString( "Pa" ), UNITS_PRESSURE_PASCALS );
	ASSERT_EQ( Units::fromString( "Pascal" ), UNITS_PRESSURE_PASCALS );
	ASSERT_EQ( Units::fromString( "Pascals" ), UNITS_PRESSURE_PASCALS );
	ASSERT_EQ( Units::fromString( "mbar" ), UNITS_PRESSURE_MILLIBARS );
	ASSERT_EQ( Units::fromString( "millibar" ), UNITS_PRESSURE_MILLIBARS );
	ASSERT_EQ( Units::fromString( "millibars" ), UNITS_PRESSURE_MILLIBARS );
	ASSERT_EQ( Units::fromString( "hPa" ), UNITS_PRESSURE_HECTOPASCALS );
	ASSERT_EQ( Units::fromString( "hectopascals" ), UNITS_PRESSURE_HECTOPASCALS );
	ASSERT_EQ( Units::fromString( "atm" ), UNITS_PRESSURE_ATMOSPHERES );
	ASSERT_EQ( Units::fromString( "atmospheres" ), UNITS_PRESSURE_ATMOSPHERES );
	ASSERT_EQ( Units::fromString( "kg/m3" ), UNITS_DENSITY_KILOGRAMS_PER_CUBIC_METER );
	ASSERT_EQ( Units::fromString( "kgpm3" ), UNITS_DENSITY_KILOGRAMS_PER_CUBIC_METER );
	ASSERT_EQ( Units::fromString( "KILOGRAMS PER CUBIC METER" ), UNITS_DENSITY_KILOGRAMS_PER_CUBIC_METER );
	ASSERT_EQ( Units::fromString( "g/cm3" ), UNITS_DENSITY_GRAMS_PER_CUBIC_CENTIMETER );
	ASSERT_EQ( Units::fromString( "gpcm3" ), UNITS_DENSITY_GRAMS_PER_CUBIC_CENTIMETER );
	ASSERT_EQ( Units::fromString( "GRAMS PER CUBIC CENTIMETER" ), UNITS_DENSITY_GRAMS_PER_CUBIC_CENTIMETER );
	ASSERT_EQ( Units::fromString( "degrees clockwise from north" ), UNITS_DIRECTION_DEGREES_CLOCKWISE_FROM_NORTH );
	ASSERT_EQ( Units::fromString( "deg cw from n" ), UNITS_DIRECTION_DEGREES_CLOCKWISE_FROM_NORTH );
	ASSERT_EQ( Units::fromString( "azimuth" ), UNITS_DIRECTION_DEGREES_CLOCKWISE_FROM_NORTH );
	ASSERT_EQ( Units::fromString( "degrees counterclockwise from east" ), UNITS_DIRECTION_DEGREES_COUNTERCLOCKWISE_FROM_EAST );
	ASSERT_EQ( Units::fromString( "deg ccw from e" ), UNITS_DIRECTION_DEGREES_COUNTERCLOCKWISE_FROM_EAST );
	ASSERT_EQ( Units::fromString( "deg" ), UNITS_ANGLE_DEGREES );
	ASSERT_EQ( Units::fromString( "degrees" ), UNITS_ANGLE_DEGREES );
	ASSERT_EQ( Units::fromString( "rad" ), UNITS_ANGLE_RADIANS );
	ASSERT_EQ( Units::fromString( "radians" ), UNITS_ANGLE_RADIANS );
}

TEST(unitsTest, BadConversionTest) {
	double in = 1.0, out;
	EXPECT_THROW( {out = Units::convert( in, UNITS_PRESSURE_MILLIBARS, UNITS_ANGLE_DEGREES );},
			std::out_of_range );
}







